--Создаю и заполняю таблицы лайков и постов

DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  target_id INT UNSIGNED NOT NULL,
  target_type_id INT UNSIGNED NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
DROP TABLE IF EXISTS target_types;
CREATE TABLE target_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO target_types (name) VALUES 
  ('messages'),
  ('users'),
  ('media'),
  ('posts');
INSERT INTO likes 
  SELECT 
    id, 
    FLOOR(1 + (RAND() * 100)), 
    FLOOR(1 + (RAND() * 100)),
    FLOOR(1 + (RAND() * 4)),
    CURRENT_TIMESTAMP 
  FROM messages;
 SELECT * FROM likes LIMIT 10;
 CREATE TABLE posts (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  community_id INT UNSIGNED,
  head VARCHAR(255),
  body TEXT NOT NULL,
  media_id INT UNSIGNED,
  is_public BOOLEAN DEFAULT TRUE,
  is_archived BOOLEAN DEFAULT FALSE,
  views_counter INT UNSIGNED DEFAULT 0,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

SELECT * FROM posts LIMIT 10;
UPDATE likes SET created_at = (SELECT created_at FROM users WHERE likes.id = users.id);
SELECT * FROM communities LIMIT 10;

 INSERT INTO posts 
  SELECT 
    id, 
    FLOOR(1 + (RAND() * 100)), 
    FLOOR(1 + (RAND() * 20)),
    body,
    body,
    FLOOR(1 + (RAND() * 100)),
    is_important, is_delivered,
    FLOOR(1 + (RAND() * 1000000)),
    CURRENT_TIMESTAMP, 
    CURRENT_TIMESTAMP
  FROM messages;
UPDATE posts SET 
  views_counter = FLOOR(1 + RAND() * 1000);
UPDATE posts SET created_at = (SELECT created_at FROM users WHERE posts.id = users.id),
                 updated_at = (SELECT updated_at FROM users WHERE posts.id = users.id);
                
SHOW TABLES;
DESC profiles;
UPDATE posts SET head = (SELECT name FROM communities ORDER BY RAND() LIMIT 1);

-- Создаю внешние ключи

ALTER TABLE profiles
  ADD CONSTRAINT profiles_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT profiles_photo_id_fk
    FOREIGN KEY (photo_id) REFERENCES media(id)
      ON DELETE SET NULL;     

ALTER TABLE messages
  ADD CONSTRAINT messages_from_user_id_fk 
    FOREIGN KEY (from_user_id) REFERENCES users(id),
  ADD CONSTRAINT messages_to_user_id_fk 
    FOREIGN KEY (to_user_id) REFERENCES users(id);

  DESC media;
 
ALTER TABLE media
  ADD CONSTRAINT media_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT media_media_type_id_fk 
    FOREIGN KEY (media_type_id) REFERENCES media_types(id)
   ON DELETE CASCADE;
  
  DESC friendship;

 ALTER TABLE friendship 
  ADD CONSTRAINT friendship_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT friendship_friend_id_fk
    FOREIGN KEY (friend_id) REFERENCES users(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT friendship_status_id_fk
    FOREIGN KEY (status_id) REFERENCES friendship_statuses(id)
      ON DELETE CASCADE;
     
  DESC communities_users;
 
 ALTER TABLE communities_users 
  ADD CONSTRAINT communities_users_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE,
   ADD CONSTRAINT communities_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id)
      ON DELETE CASCADE;
   
  DESC posts;
 
 ALTER TABLE posts
  ADD CONSTRAINT posts_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id),
   ADD CONSTRAINT posts_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT posts_media_id_fk 
    FOREIGN KEY (media_id) REFERENCES media(id)
      ON DELETE SET NULL;
 
 DESC likes;
  
  ALTER TABLE likes
  ADD CONSTRAINT likes_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
    ON DELETE CASCADE,
   ADD CONSTRAINT likes__target_id_fk 
    FOREIGN KEY (target_id) REFERENCES users(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT likes_target_type_id_fk 
    FOREIGN KEY (target_type_id) REFERENCES target_types(id)
      ON DELETE CASCADE; 
   
--Подсчитываю кто кто больше поставил лайков - мужчины или женщины.

SHOW TABLES; 
SELECT COUNT(id) FROM likes WHERE user_id IN 
    (SELECT id FROM users WHERE id IN 
     (SELECT user_id FROM profiles WHERE gender = 'F')) 
     UNION
SELECT COUNT(id) FROM likes WHERE user_id IN 
   (SELECT id FROM users WHERE id IN 
     (SELECT user_id FROM profiles WHERE gender = 'M'));
     
--Подсчитать общее количество лайков десяти самым молодым пользователям 

CREATE TEMPORARY TABLE temp SELECT user_id FROM profiles ORDER BY birthday DESC LIMIT 10;
SELECT * FROM temp;
SELECT COUNT(target_id) FROM likes WHERE target_id IN (SELECT user_id FROM temp);

--Найти 10 пользователей, которые проявляют наименьшую активность в использовании
 социальной сети(активность по постам)

SELECT user_id, COUNT(id) FROM posts GROUP BY user_id ORDER BY COUNT(id) LIMIT 10;
